package demo.vendors;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;

import java.io.*;
import java.util.List;

/**
 * Apache POI库本身并不支持直接生成PDF文件。
 * 它主要用于处理Microsoft Office文件格式，如Excel和Word。
 * 可以结合其他库来实现将POI生成的内容转换为PDF格式
 */
public class PDFExample {
    public static final String testStr1 = "Hello, World! this is my firsttime to use poi to manupilate pdf!";
    public static final String testStr2 = "Apache POI itself no support pdf file directly.";
    public static final String testStr3 = "it is majorly used for Microsoft Office file format such as Excel and Word.";
    public static final String testStr4 = " but you can integrated other library to convert the content generated by POI to PDF format.";

    public static final String docName = "document.docx";
    public static final String pdfName = "document.pdf";

    public static void convertWord2PDF() {
        try (XWPFDocument document = new XWPFDocument()) {
            XWPFParagraph paragraph1 = document.createParagraph();
            XWPFRun run = paragraph1.createRun();
            run.setText(testStr1+testStr2+testStr3+testStr4);

            try (FileOutputStream outputStream = new FileOutputStream(docName)) {
                document.write(outputStream);
            }

            try (PDDocument pdfDocument = new PDDocument()) {
                PDPage page = new PDPage();
                pdfDocument.addPage(page);

                try (PDPageContentStream contentStream = new PDPageContentStream(pdfDocument, page)) {
                    XWPFDocument doc = new XWPFDocument(new FileInputStream(docName));
                    XWPFWordExtractor wordExtractor = new XWPFWordExtractor(doc);
                    String text = wordExtractor.getText();
                    text = text.replace("\n", " ").replace("\r", " ");
                    contentStream.beginText();
                    contentStream.setFont(PDType1Font.COURIER, 12);
                    contentStream.newLineAtOffset(25, 700);
                    contentStream.showText(text);
                    contentStream.endText();
                }

                pdfDocument.save(pdfName);
                System.out.println("PDF file generated successfully.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void readPDF() {
        try {
            FileInputStream fis = new FileInputStream(pdfName);
            XWPFDocument document = new XWPFDocument(fis);

            List<XWPFParagraph> paragraphs = document.getParagraphs();
            for (XWPFParagraph paragraph : paragraphs) {
                paragraph.getRuns().forEach(run->System.out.println(run.text()));
            }
            document.close();
            fis.close();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
    }

    public static void main(String[] args) {
        convertWord2PDF();
        readPDF();
    }
}
